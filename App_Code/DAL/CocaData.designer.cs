#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SQL2008R2_847344_surveys")]
	public partial class CocaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAnonStudent(AnonStudent instance);
    partial void UpdateAnonStudent(AnonStudent instance);
    partial void DeleteAnonStudent(AnonStudent instance);
    partial void InsertYear(Year instance);
    partial void UpdateYear(Year instance);
    partial void DeleteYear(Year instance);
    partial void InsertClassLevel(ClassLevel instance);
    partial void UpdateClassLevel(ClassLevel instance);
    partial void DeleteClassLevel(ClassLevel instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertSchoolYear(SchoolYear instance);
    partial void UpdateSchoolYear(SchoolYear instance);
    partial void DeleteSchoolYear(SchoolYear instance);
    partial void InsertSeason(Season instance);
    partial void UpdateSeason(Season instance);
    partial void DeleteSeason(Season instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertStudentGroup(StudentGroup instance);
    partial void UpdateStudentGroup(StudentGroup instance);
    partial void DeleteStudentGroup(StudentGroup instance);
    partial void InsertStudentGroupSeason(StudentGroupSeason instance);
    partial void UpdateStudentGroupSeason(StudentGroupSeason instance);
    partial void DeleteStudentGroupSeason(StudentGroupSeason instance);
    partial void InsertStudent(Student instance);
    partial void UpdateStudent(Student instance);
    partial void DeleteStudent(Student instance);
    partial void InsertStudentSurveyDate(StudentSurveyDate instance);
    partial void UpdateStudentSurveyDate(StudentSurveyDate instance);
    partial void DeleteStudentSurveyDate(StudentSurveyDate instance);
    partial void InsertStudentSurveyRating(StudentSurveyRating instance);
    partial void UpdateStudentSurveyRating(StudentSurveyRating instance);
    partial void DeleteStudentSurveyRating(StudentSurveyRating instance);
    #endregion
		
		public CocaDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CocaChildConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public CocaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CocaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CocaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CocaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AnonStudent> AnonStudents
		{
			get
			{
				return this.GetTable<AnonStudent>();
			}
		}
		
		public System.Data.Linq.Table<Year> Years
		{
			get
			{
				return this.GetTable<Year>();
			}
		}
		
		public System.Data.Linq.Table<ClassLevel> ClassLevels
		{
			get
			{
				return this.GetTable<ClassLevel>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<SchoolYear> SchoolYears
		{
			get
			{
				return this.GetTable<SchoolYear>();
			}
		}
		
		public System.Data.Linq.Table<Season> Seasons
		{
			get
			{
				return this.GetTable<Season>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<StudentGroup> StudentGroups
		{
			get
			{
				return this.GetTable<StudentGroup>();
			}
		}
		
		public System.Data.Linq.Table<StudentGroupSeason> StudentGroupSeasons
		{
			get
			{
				return this.GetTable<StudentGroupSeason>();
			}
		}
		
		public System.Data.Linq.Table<Student> Students
		{
			get
			{
				return this.GetTable<Student>();
			}
		}
		
		public System.Data.Linq.Table<StudentSurveyDate> StudentSurveyDates
		{
			get
			{
				return this.GetTable<StudentSurveyDate>();
			}
		}
		
		public System.Data.Linq.Table<StudentSurveyRating> StudentSurveyRatings
		{
			get
			{
				return this.GetTable<StudentSurveyRating>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AnonStudents")]
	public partial class AnonStudent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _UserId;
		
		private string _Password;
		
		private long _StudentGroupSeasonId;
		
		private System.Nullable<System.DateTime> _LoggedInDate;
		
		private System.Nullable<System.DateTime> _SavedDate;
		
		private EntitySet<StudentSurveyRating> _StudentSurveyRatings;
		
		private EntityRef<StudentGroupSeason> _StudentGroupSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnStudentGroupSeasonIdChanging(long value);
    partial void OnStudentGroupSeasonIdChanged();
    partial void OnLoggedInDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLoggedInDateChanged();
    partial void OnSavedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSavedDateChanged();
    #endregion
		
		public AnonStudent()
		{
			this._StudentSurveyRatings = new EntitySet<StudentSurveyRating>(new Action<StudentSurveyRating>(this.attach_StudentSurveyRatings), new Action<StudentSurveyRating>(this.detach_StudentSurveyRatings));
			this._StudentGroupSeason = default(EntityRef<StudentGroupSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="AnonStudentId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentGroupSeasonId", DbType="BigInt NOT NULL")]
		public long StudentGroupSeasonId
		{
			get
			{
				return this._StudentGroupSeasonId;
			}
			set
			{
				if ((this._StudentGroupSeasonId != value))
				{
					if (this._StudentGroupSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentGroupSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._StudentGroupSeasonId = value;
					this.SendPropertyChanged("StudentGroupSeasonId");
					this.OnStudentGroupSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggedInDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoggedInDate
		{
			get
			{
				return this._LoggedInDate;
			}
			set
			{
				if ((this._LoggedInDate != value))
				{
					this.OnLoggedInDateChanging(value);
					this.SendPropertyChanging();
					this._LoggedInDate = value;
					this.SendPropertyChanged("LoggedInDate");
					this.OnLoggedInDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SavedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SavedDate
		{
			get
			{
				return this._SavedDate;
			}
			set
			{
				if ((this._SavedDate != value))
				{
					this.OnSavedDateChanging(value);
					this.SendPropertyChanging();
					this._SavedDate = value;
					this.SendPropertyChanged("SavedDate");
					this.OnSavedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnonStudent_StudentSurveyRating", Storage="_StudentSurveyRatings", ThisKey="Id", OtherKey="AnonStudentId")]
		public EntitySet<StudentSurveyRating> StudentSurveyRatings
		{
			get
			{
				return this._StudentSurveyRatings;
			}
			set
			{
				this._StudentSurveyRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupSeason_AnonStudent", Storage="_StudentGroupSeason", ThisKey="StudentGroupSeasonId", OtherKey="Id", IsForeignKey=true)]
		public StudentGroupSeason StudentGroupSeason
		{
			get
			{
				return this._StudentGroupSeason.Entity;
			}
			set
			{
				StudentGroupSeason previousValue = this._StudentGroupSeason.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroupSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroupSeason.Entity = null;
						previousValue.AnonStudents.Remove(this);
					}
					this._StudentGroupSeason.Entity = value;
					if ((value != null))
					{
						value.AnonStudents.Add(this);
						this._StudentGroupSeasonId = value.Id;
					}
					else
					{
						this._StudentGroupSeasonId = default(long);
					}
					this.SendPropertyChanged("StudentGroupSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentSurveyRatings(StudentSurveyRating entity)
		{
			this.SendPropertyChanging();
			entity.AnonStudent = this;
		}
		
		private void detach_StudentSurveyRatings(StudentSurveyRating entity)
		{
			this.SendPropertyChanging();
			entity.AnonStudent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Years")]
	public partial class Year : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _weight;
		
		private EntitySet<SchoolYear> _SchoolYears;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnweightChanging(string value);
    partial void OnweightChanged();
    #endregion
		
		public Year()
		{
			this._SchoolYears = new EntitySet<SchoolYear>(new Action<SchoolYear>(this.attach_SchoolYears), new Action<SchoolYear>(this.detach_SchoolYears));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="YearId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="YearName", Storage="_Name", DbType="VarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_weight", DbType="VarChar(25)")]
		public string weight
		{
			get
			{
				return this._weight;
			}
			set
			{
				if ((this._weight != value))
				{
					this.OnweightChanging(value);
					this.SendPropertyChanging();
					this._weight = value;
					this.SendPropertyChanged("weight");
					this.OnweightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_SchoolYear", Storage="_SchoolYears", ThisKey="Id", OtherKey="YearId")]
		public EntitySet<SchoolYear> SchoolYears
		{
			get
			{
				return this._SchoolYears;
			}
			set
			{
				this._SchoolYears.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolYears(SchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.Year = this;
		}
		
		private void detach_SchoolYears(SchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.Year = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassLevels")]
	public partial class ClassLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _Weight;
		
		private EntitySet<StudentGroup> _StudentGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWeightChanging(System.Nullable<int> value);
    partial void OnWeightChanged();
    #endregion
		
		public ClassLevel()
		{
			this._StudentGroups = new EntitySet<StudentGroup>(new Action<StudentGroup>(this.attach_StudentGroups), new Action<StudentGroup>(this.detach_StudentGroups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ClassLevelId", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ClassLevelName", Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="Int")]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassLevel_StudentGroup", Storage="_StudentGroups", ThisKey="Id", OtherKey="ClassLevelId")]
		public EntitySet<StudentGroup> StudentGroups
		{
			get
			{
				return this._StudentGroups;
			}
			set
			{
				this._StudentGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentGroups(StudentGroup entity)
		{
			this.SendPropertyChanging();
			entity.ClassLevel = this;
		}
		
		private void detach_StudentGroups(StudentGroup entity)
		{
			this.SendPropertyChanging();
			entity.ClassLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Schools")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Address3;
		
		private string _City;
		
		private System.Nullable<int> _StateId;
		
		private string _Zip;
		
		private EntitySet<SchoolYear> _SchoolYears;
		
		private EntityRef<State> _State;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnAddress3Changing(string value);
    partial void OnAddress3Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    #endregion
		
		public School()
		{
			this._SchoolYears = new EntitySet<SchoolYear>(new Action<SchoolYear>(this.attach_SchoolYears), new Action<SchoolYear>(this.detach_SchoolYears));
			this._State = default(EntityRef<State>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SchoolId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SchoolName", Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(255)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(255)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address3", DbType="VarChar(255)")]
		public string Address3
		{
			get
			{
				return this._Address3;
			}
			set
			{
				if ((this._Address3 != value))
				{
					this.OnAddress3Changing(value);
					this.SendPropertyChanging();
					this._Address3 = value;
					this.SendPropertyChanged("Address3");
					this.OnAddress3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(255)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(25)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_SchoolYear", Storage="_SchoolYears", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<SchoolYear> SchoolYears
		{
			get
			{
				return this._SchoolYears;
			}
			set
			{
				this._SchoolYears.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_School", Storage="_State", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolYears(SchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_SchoolYears(SchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolYears")]
	public partial class SchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _SchoolId;
		
		private int _YearId;
		
		private EntitySet<StudentGroup> _StudentGroups;
		
		private EntityRef<School> _School;
		
		private EntityRef<Year> _Year;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(long value);
    partial void OnSchoolIdChanged();
    partial void OnYearIdChanging(int value);
    partial void OnYearIdChanged();
    #endregion
		
		public SchoolYear()
		{
			this._StudentGroups = new EntitySet<StudentGroup>(new Action<StudentGroup>(this.attach_StudentGroups), new Action<StudentGroup>(this.detach_StudentGroups));
			this._School = default(EntityRef<School>);
			this._Year = default(EntityRef<Year>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SchoolYearId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolId", DbType="BigInt NOT NULL")]
		public long SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearId", DbType="Int NOT NULL")]
		public int YearId
		{
			get
			{
				return this._YearId;
			}
			set
			{
				if ((this._YearId != value))
				{
					if (this._Year.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnYearIdChanging(value);
					this.SendPropertyChanging();
					this._YearId = value;
					this.SendPropertyChanged("YearId");
					this.OnYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_StudentGroup", Storage="_StudentGroups", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<StudentGroup> StudentGroups
		{
			get
			{
				return this._StudentGroups;
			}
			set
			{
				this._StudentGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="School_SchoolYear", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.SchoolYears.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.SchoolYears.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(long);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Year_SchoolYear", Storage="_Year", ThisKey="YearId", OtherKey="Id", IsForeignKey=true)]
		public Year Year
		{
			get
			{
				return this._Year.Entity;
			}
			set
			{
				Year previousValue = this._Year.Entity;
				if (((previousValue != value) 
							|| (this._Year.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Year.Entity = null;
						previousValue.SchoolYears.Remove(this);
					}
					this._Year.Entity = value;
					if ((value != null))
					{
						value.SchoolYears.Add(this);
						this._YearId = value.Id;
					}
					else
					{
						this._YearId = default(int);
					}
					this.SendPropertyChanged("Year");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentGroups(StudentGroup entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_StudentGroups(StudentGroup entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seasons")]
	public partial class Season : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Weight;
		
		private EntitySet<StudentGroupSeason> _StudentGroupSeasons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    #endregion
		
		public Season()
		{
			this._StudentGroupSeasons = new EntitySet<StudentGroupSeason>(new Action<StudentGroupSeason>(this.attach_StudentGroupSeasons), new Action<StudentGroupSeason>(this.detach_StudentGroupSeasons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SeasonId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SeasonName", Storage="_Name", DbType="VarChar(25)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="VarChar(25)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_StudentGroupSeason", Storage="_StudentGroupSeasons", ThisKey="Id", OtherKey="SeasonId")]
		public EntitySet<StudentGroupSeason> StudentGroupSeasons
		{
			get
			{
				return this._StudentGroupSeasons;
			}
			set
			{
				this._StudentGroupSeasons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentGroupSeasons(StudentGroupSeason entity)
		{
			this.SendPropertyChanging();
			entity.Season = this;
		}
		
		private void detach_StudentGroupSeasons(StudentGroupSeason entity)
		{
			this.SendPropertyChanging();
			entity.Season = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.States")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<School> _Schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public State()
		{
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StateId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StateName", Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="State_School", Storage="_Schools", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentGroups")]
	public partial class StudentGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private long _SchoolYearId;
		
		private System.Nullable<int> _ClassLevelId;
		
		private EntitySet<StudentGroupSeason> _StudentGroupSeasons;
		
		private EntitySet<Student> _Students;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
		private EntityRef<ClassLevel> _ClassLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSchoolYearIdChanging(long value);
    partial void OnSchoolYearIdChanged();
    partial void OnClassLevelIdChanging(System.Nullable<int> value);
    partial void OnClassLevelIdChanged();
    #endregion
		
		public StudentGroup()
		{
			this._StudentGroupSeasons = new EntitySet<StudentGroupSeason>(new Action<StudentGroupSeason>(this.attach_StudentGroupSeasons), new Action<StudentGroupSeason>(this.detach_StudentGroupSeasons));
			this._Students = new EntitySet<Student>(new Action<Student>(this.attach_Students), new Action<Student>(this.detach_Students));
			this._SchoolYear = default(EntityRef<SchoolYear>);
			this._ClassLevel = default(EntityRef<ClassLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StudentGroupId", Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StudentGroupName", Storage="_Name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearId", DbType="BigInt NOT NULL")]
		public long SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassLevelId", DbType="Int")]
		public System.Nullable<int> ClassLevelId
		{
			get
			{
				return this._ClassLevelId;
			}
			set
			{
				if ((this._ClassLevelId != value))
				{
					if (this._ClassLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassLevelIdChanging(value);
					this.SendPropertyChanging();
					this._ClassLevelId = value;
					this.SendPropertyChanged("ClassLevelId");
					this.OnClassLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroup_StudentGroupSeason", Storage="_StudentGroupSeasons", ThisKey="Id", OtherKey="StudentGroupId")]
		public EntitySet<StudentGroupSeason> StudentGroupSeasons
		{
			get
			{
				return this._StudentGroupSeasons;
			}
			set
			{
				this._StudentGroupSeasons.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroup_Student", Storage="_Students", ThisKey="Id", OtherKey="StudentGroupId")]
		public EntitySet<Student> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_StudentGroup", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.StudentGroups.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.StudentGroups.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(long);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ClassLevel_StudentGroup", Storage="_ClassLevel", ThisKey="ClassLevelId", OtherKey="Id", IsForeignKey=true)]
		public ClassLevel ClassLevel
		{
			get
			{
				return this._ClassLevel.Entity;
			}
			set
			{
				ClassLevel previousValue = this._ClassLevel.Entity;
				if (((previousValue != value) 
							|| (this._ClassLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassLevel.Entity = null;
						previousValue.StudentGroups.Remove(this);
					}
					this._ClassLevel.Entity = value;
					if ((value != null))
					{
						value.StudentGroups.Add(this);
						this._ClassLevelId = value.Id;
					}
					else
					{
						this._ClassLevelId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ClassLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentGroupSeasons(StudentGroupSeason entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroup = this;
		}
		
		private void detach_StudentGroupSeasons(StudentGroupSeason entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroup = null;
		}
		
		private void attach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroup = this;
		}
		
		private void detach_Students(Student entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentGroupSeason")]
	public partial class StudentGroupSeason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.DateTime _SurveyDate;
		
		private long _StudentGroupId;
		
		private int _SeasonId;
		
		private EntitySet<AnonStudent> _AnonStudents;
		
		private EntitySet<StudentSurveyDate> _StudentSurveyDates;
		
		private EntityRef<StudentGroup> _StudentGroup;
		
		private EntityRef<Season> _Season;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSurveyDateChanging(System.DateTime value);
    partial void OnSurveyDateChanged();
    partial void OnStudentGroupIdChanging(long value);
    partial void OnStudentGroupIdChanged();
    partial void OnSeasonIdChanging(int value);
    partial void OnSeasonIdChanged();
    #endregion
		
		public StudentGroupSeason()
		{
			this._AnonStudents = new EntitySet<AnonStudent>(new Action<AnonStudent>(this.attach_AnonStudents), new Action<AnonStudent>(this.detach_AnonStudents));
			this._StudentSurveyDates = new EntitySet<StudentSurveyDate>(new Action<StudentSurveyDate>(this.attach_StudentSurveyDates), new Action<StudentSurveyDate>(this.detach_StudentSurveyDates));
			this._StudentGroup = default(EntityRef<StudentGroup>);
			this._Season = default(EntityRef<Season>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StudentGroupSeasonId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyDate", DbType="DateTime NOT NULL")]
		public System.DateTime SurveyDate
		{
			get
			{
				return this._SurveyDate;
			}
			set
			{
				if ((this._SurveyDate != value))
				{
					this.OnSurveyDateChanging(value);
					this.SendPropertyChanging();
					this._SurveyDate = value;
					this.SendPropertyChanged("SurveyDate");
					this.OnSurveyDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentGroupId", DbType="BigInt NOT NULL")]
		public long StudentGroupId
		{
			get
			{
				return this._StudentGroupId;
			}
			set
			{
				if ((this._StudentGroupId != value))
				{
					if (this._StudentGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentGroupIdChanging(value);
					this.SendPropertyChanging();
					this._StudentGroupId = value;
					this.SendPropertyChanged("StudentGroupId");
					this.OnStudentGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonId", DbType="Int NOT NULL")]
		public int SeasonId
		{
			get
			{
				return this._SeasonId;
			}
			set
			{
				if ((this._SeasonId != value))
				{
					if (this._Season.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeasonIdChanging(value);
					this.SendPropertyChanging();
					this._SeasonId = value;
					this.SendPropertyChanged("SeasonId");
					this.OnSeasonIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupSeason_AnonStudent", Storage="_AnonStudents", ThisKey="Id", OtherKey="StudentGroupSeasonId")]
		public EntitySet<AnonStudent> AnonStudents
		{
			get
			{
				return this._AnonStudents;
			}
			set
			{
				this._AnonStudents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupSeason_StudentSurveyDate", Storage="_StudentSurveyDates", ThisKey="Id", OtherKey="SurveyDateId")]
		public EntitySet<StudentSurveyDate> StudentSurveyDates
		{
			get
			{
				return this._StudentSurveyDates;
			}
			set
			{
				this._StudentSurveyDates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroup_StudentGroupSeason", Storage="_StudentGroup", ThisKey="StudentGroupId", OtherKey="Id", IsForeignKey=true)]
		public StudentGroup StudentGroup
		{
			get
			{
				return this._StudentGroup.Entity;
			}
			set
			{
				StudentGroup previousValue = this._StudentGroup.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroup.Entity = null;
						previousValue.StudentGroupSeasons.Remove(this);
					}
					this._StudentGroup.Entity = value;
					if ((value != null))
					{
						value.StudentGroupSeasons.Add(this);
						this._StudentGroupId = value.Id;
					}
					else
					{
						this._StudentGroupId = default(long);
					}
					this.SendPropertyChanged("StudentGroup");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Season_StudentGroupSeason", Storage="_Season", ThisKey="SeasonId", OtherKey="Id", IsForeignKey=true)]
		public Season Season
		{
			get
			{
				return this._Season.Entity;
			}
			set
			{
				Season previousValue = this._Season.Entity;
				if (((previousValue != value) 
							|| (this._Season.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Season.Entity = null;
						previousValue.StudentGroupSeasons.Remove(this);
					}
					this._Season.Entity = value;
					if ((value != null))
					{
						value.StudentGroupSeasons.Add(this);
						this._SeasonId = value.Id;
					}
					else
					{
						this._SeasonId = default(int);
					}
					this.SendPropertyChanged("Season");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AnonStudents(AnonStudent entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupSeason = this;
		}
		
		private void detach_AnonStudents(AnonStudent entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupSeason = null;
		}
		
		private void attach_StudentSurveyDates(StudentSurveyDate entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupSeason = this;
		}
		
		private void detach_StudentSurveyDates(StudentSurveyDate entity)
		{
			this.SendPropertyChanging();
			entity.StudentGroupSeason = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _TeacherName;
		
		private long _StudentGroupId;
		
		private EntitySet<StudentSurveyDate> _StudentSurveyDates;
		
		private EntityRef<StudentGroup> _StudentGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnTeacherNameChanging(string value);
    partial void OnTeacherNameChanged();
    partial void OnStudentGroupIdChanging(long value);
    partial void OnStudentGroupIdChanged();
    #endregion
		
		public Student()
		{
			this._StudentSurveyDates = new EntitySet<StudentSurveyDate>(new Action<StudentSurveyDate>(this.attach_StudentSurveyDates), new Action<StudentSurveyDate>(this.detach_StudentSurveyDates));
			this._StudentGroup = default(EntityRef<StudentGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StudentId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="VarChar(100)")]
		public string TeacherName
		{
			get
			{
				return this._TeacherName;
			}
			set
			{
				if ((this._TeacherName != value))
				{
					this.OnTeacherNameChanging(value);
					this.SendPropertyChanging();
					this._TeacherName = value;
					this.SendPropertyChanged("TeacherName");
					this.OnTeacherNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentGroupId", DbType="BigInt NOT NULL")]
		public long StudentGroupId
		{
			get
			{
				return this._StudentGroupId;
			}
			set
			{
				if ((this._StudentGroupId != value))
				{
					if (this._StudentGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentGroupIdChanging(value);
					this.SendPropertyChanging();
					this._StudentGroupId = value;
					this.SendPropertyChanged("StudentGroupId");
					this.OnStudentGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentSurveyDate", Storage="_StudentSurveyDates", ThisKey="Id", OtherKey="StudentId")]
		public EntitySet<StudentSurveyDate> StudentSurveyDates
		{
			get
			{
				return this._StudentSurveyDates;
			}
			set
			{
				this._StudentSurveyDates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroup_Student", Storage="_StudentGroup", ThisKey="StudentGroupId", OtherKey="Id", IsForeignKey=true)]
		public StudentGroup StudentGroup
		{
			get
			{
				return this._StudentGroup.Entity;
			}
			set
			{
				StudentGroup previousValue = this._StudentGroup.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroup.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._StudentGroup.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._StudentGroupId = value.Id;
					}
					else
					{
						this._StudentGroupId = default(long);
					}
					this.SendPropertyChanged("StudentGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentSurveyDates(StudentSurveyDate entity)
		{
			this.SendPropertyChanging();
			entity.Student = this;
		}
		
		private void detach_StudentSurveyDates(StudentSurveyDate entity)
		{
			this.SendPropertyChanging();
			entity.Student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentSurveyDates")]
	public partial class StudentSurveyDate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _StudentId;
		
		private long _SurveyDateId;
		
		private EntitySet<StudentSurveyRating> _StudentSurveyRatings;
		
		private EntityRef<Student> _Student;
		
		private EntityRef<StudentGroupSeason> _StudentGroupSeason;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnStudentIdChanging(long value);
    partial void OnStudentIdChanged();
    partial void OnSurveyDateIdChanging(long value);
    partial void OnSurveyDateIdChanged();
    #endregion
		
		public StudentSurveyDate()
		{
			this._StudentSurveyRatings = new EntitySet<StudentSurveyRating>(new Action<StudentSurveyRating>(this.attach_StudentSurveyRatings), new Action<StudentSurveyRating>(this.detach_StudentSurveyRatings));
			this._Student = default(EntityRef<Student>);
			this._StudentGroupSeason = default(EntityRef<StudentGroupSeason>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StudentSurveyDateId", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentId", DbType="BigInt NOT NULL")]
		public long StudentId
		{
			get
			{
				return this._StudentId;
			}
			set
			{
				if ((this._StudentId != value))
				{
					if (this._Student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentIdChanging(value);
					this.SendPropertyChanging();
					this._StudentId = value;
					this.SendPropertyChanged("StudentId");
					this.OnStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SurveyDateId", DbType="BigInt NOT NULL")]
		public long SurveyDateId
		{
			get
			{
				return this._SurveyDateId;
			}
			set
			{
				if ((this._SurveyDateId != value))
				{
					if (this._StudentGroupSeason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSurveyDateIdChanging(value);
					this.SendPropertyChanging();
					this._SurveyDateId = value;
					this.SendPropertyChanged("SurveyDateId");
					this.OnSurveyDateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentSurveyDate_StudentSurveyRating", Storage="_StudentSurveyRatings", ThisKey="Id", OtherKey="StudentSurveyDateId")]
		public EntitySet<StudentSurveyRating> StudentSurveyRatings
		{
			get
			{
				return this._StudentSurveyRatings;
			}
			set
			{
				this._StudentSurveyRatings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_StudentSurveyDate", Storage="_Student", ThisKey="StudentId", OtherKey="Id", IsForeignKey=true)]
		public Student Student
		{
			get
			{
				return this._Student.Entity;
			}
			set
			{
				Student previousValue = this._Student.Entity;
				if (((previousValue != value) 
							|| (this._Student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student.Entity = null;
						previousValue.StudentSurveyDates.Remove(this);
					}
					this._Student.Entity = value;
					if ((value != null))
					{
						value.StudentSurveyDates.Add(this);
						this._StudentId = value.Id;
					}
					else
					{
						this._StudentId = default(long);
					}
					this.SendPropertyChanged("Student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentGroupSeason_StudentSurveyDate", Storage="_StudentGroupSeason", ThisKey="SurveyDateId", OtherKey="Id", IsForeignKey=true)]
		public StudentGroupSeason StudentGroupSeason
		{
			get
			{
				return this._StudentGroupSeason.Entity;
			}
			set
			{
				StudentGroupSeason previousValue = this._StudentGroupSeason.Entity;
				if (((previousValue != value) 
							|| (this._StudentGroupSeason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentGroupSeason.Entity = null;
						previousValue.StudentSurveyDates.Remove(this);
					}
					this._StudentGroupSeason.Entity = value;
					if ((value != null))
					{
						value.StudentSurveyDates.Add(this);
						this._SurveyDateId = value.Id;
					}
					else
					{
						this._SurveyDateId = default(long);
					}
					this.SendPropertyChanged("StudentGroupSeason");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StudentSurveyRatings(StudentSurveyRating entity)
		{
			this.SendPropertyChanging();
			entity.StudentSurveyDate = this;
		}
		
		private void detach_StudentSurveyRatings(StudentSurveyRating entity)
		{
			this.SendPropertyChanging();
			entity.StudentSurveyDate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentSurveyRatings")]
	public partial class StudentSurveyRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _StudentSurveyDateId;
		
		private long _AnonStudentId;
		
		private int _WasBulliedValue;
		
		private System.Nullable<int> _IsBullyValue;
		
		private string _Comment;
		
		private EntityRef<AnonStudent> _AnonStudent;
		
		private EntityRef<StudentSurveyDate> _StudentSurveyDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnStudentSurveyDateIdChanging(long value);
    partial void OnStudentSurveyDateIdChanged();
    partial void OnAnonStudentIdChanging(long value);
    partial void OnAnonStudentIdChanged();
    partial void OnWasBulliedValueChanging(int value);
    partial void OnWasBulliedValueChanged();
    partial void OnIsBullyValueChanging(System.Nullable<int> value);
    partial void OnIsBullyValueChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public StudentSurveyRating()
		{
			this._AnonStudent = default(EntityRef<AnonStudent>);
			this._StudentSurveyDate = default(EntityRef<StudentSurveyDate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="StudentSurveyRatingId", Storage="_Id", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentSurveyDateId", DbType="BigInt NOT NULL")]
		public long StudentSurveyDateId
		{
			get
			{
				return this._StudentSurveyDateId;
			}
			set
			{
				if ((this._StudentSurveyDateId != value))
				{
					if (this._StudentSurveyDate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudentSurveyDateIdChanging(value);
					this.SendPropertyChanging();
					this._StudentSurveyDateId = value;
					this.SendPropertyChanged("StudentSurveyDateId");
					this.OnStudentSurveyDateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnonStudentId", DbType="BigInt NOT NULL")]
		public long AnonStudentId
		{
			get
			{
				return this._AnonStudentId;
			}
			set
			{
				if ((this._AnonStudentId != value))
				{
					if (this._AnonStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnonStudentIdChanging(value);
					this.SendPropertyChanging();
					this._AnonStudentId = value;
					this.SendPropertyChanged("AnonStudentId");
					this.OnAnonStudentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WasBulliedValue", DbType="Int NOT NULL")]
		public int WasBulliedValue
		{
			get
			{
				return this._WasBulliedValue;
			}
			set
			{
				if ((this._WasBulliedValue != value))
				{
					this.OnWasBulliedValueChanging(value);
					this.SendPropertyChanging();
					this._WasBulliedValue = value;
					this.SendPropertyChanged("WasBulliedValue");
					this.OnWasBulliedValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBullyValue", DbType="Int")]
		public System.Nullable<int> IsBullyValue
		{
			get
			{
				return this._IsBullyValue;
			}
			set
			{
				if ((this._IsBullyValue != value))
				{
					this.OnIsBullyValueChanging(value);
					this.SendPropertyChanging();
					this._IsBullyValue = value;
					this.SendPropertyChanged("IsBullyValue");
					this.OnIsBullyValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(350)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AnonStudent_StudentSurveyRating", Storage="_AnonStudent", ThisKey="AnonStudentId", OtherKey="Id", IsForeignKey=true)]
		public AnonStudent AnonStudent
		{
			get
			{
				return this._AnonStudent.Entity;
			}
			set
			{
				AnonStudent previousValue = this._AnonStudent.Entity;
				if (((previousValue != value) 
							|| (this._AnonStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AnonStudent.Entity = null;
						previousValue.StudentSurveyRatings.Remove(this);
					}
					this._AnonStudent.Entity = value;
					if ((value != null))
					{
						value.StudentSurveyRatings.Add(this);
						this._AnonStudentId = value.Id;
					}
					else
					{
						this._AnonStudentId = default(long);
					}
					this.SendPropertyChanged("AnonStudent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StudentSurveyDate_StudentSurveyRating", Storage="_StudentSurveyDate", ThisKey="StudentSurveyDateId", OtherKey="Id", IsForeignKey=true)]
		public StudentSurveyDate StudentSurveyDate
		{
			get
			{
				return this._StudentSurveyDate.Entity;
			}
			set
			{
				StudentSurveyDate previousValue = this._StudentSurveyDate.Entity;
				if (((previousValue != value) 
							|| (this._StudentSurveyDate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StudentSurveyDate.Entity = null;
						previousValue.StudentSurveyRatings.Remove(this);
					}
					this._StudentSurveyDate.Entity = value;
					if ((value != null))
					{
						value.StudentSurveyRatings.Add(this);
						this._StudentSurveyDateId = value.Id;
					}
					else
					{
						this._StudentSurveyDateId = default(long);
					}
					this.SendPropertyChanged("StudentSurveyDate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
